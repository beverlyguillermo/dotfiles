function parse_hg_branch {
# ☿
  local hg_status=`hg status`
}

function parse_git_branch {
  local git_status="`git status -unormal 2>&1`"
  if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
      git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/± [ \1 ]/"
    else
      git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/± [ \1* ]/"
    fi
  fi
}

#set -o vi

export GREP_OPTIONS='--color=auto' GREP_COLOR='1;32'
export CLICOLOR=1
export LS_COLORS='di=1;36:fi=0:ln=4;34:pi=5:so=4;5:bd=5:cd=5:or=4;91:mi=4;92:ex=35:*.rb=90'
#export EDITOR='atom'
export EDITOR='vim'
#export SVN_EDITOR=vim
export GIT_EDITOR=vim


export PATH=~/.bin:/usr/local/sbin:/usr/local/bin:/opt/local/bin:/opt/local/sbin:/usr/local/opt/postgresql@9.5/bin:$PATH
export PATH=$PATH:/Applications/Araxis\ Merge.app/Contents/Utilities

export PS1="\[\033[0;35m\]\u\[\033[0;37m\] at \[\033[0;33m\]\h\[\033[0;37m\]:\[\033[0;34m\]\A\[\033[0;37m\] in \[\033[0;32m\]\w\[\033[0;34m\] \$(parse_git_branch) \n\[\033[0;37m\]\`if [ \$? == 0 ]; then echo \$; else echo \:\(; fi\`\[\033[0m\] "
#export PS1="\[\033[0;35m\]\u\[\033[0;37m\] at \[\033[0;33m\]\h\[\033[0;37m\]:\[\033[0;34m\]\$(date +%H:%M)\[\033[0;37m\] in \[\033[0;32m\]\w\[\033[0;34m\] \$(parse_git_branch) \n\[\033[0;37m\]$\[\033[0m\] "
#export PS1="\[\033[0;44m\]\u\[\033[0;37m\] at \[\033[0;33m\]\h\[\033[0;37m\] \[\033[0;37m\]in \[\033[0;32m\]\w\[\033[0;34m\] \$(parse_git_branch) \n\[\033[0;37m\]$\[\033[0m\] "

# Colors
#if [ "$TMUX_PANE" != "" ]; then
#  export TERM="screen-256color"
#elif [ -e /usr/share/terminfo/x/xterm-256color ]; then
#  export TERM='xterm-256color'
#else
  export TERM='xterm-color'
#fi

# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
umask 002

# if running bash
#if [ -n "$BASH_VERSION" ]; then
#    include .bashrc if it exists
#  if [ -f "$HOME/.bashrc" ]; then
#    "$HOME/.bashrc"
#  fi
#fi

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

if [ -d "$HOME/.fzf" ] ; then
  [ -f ~/.fzf.bash ] && source ~/.fzf.bash
fi

if [ -d "$HOME/.node/bin" ] ; then
    PATH="$HOME/.node/bin:$PATH"
fi

if [ -d "$HOME/.nvm" ] ; then
    export NVM_DIR=~/.nvm
    if [ -f "$HOME/.nvm/nvm.sh" ] ; then
      source ~/.nvm/nvm.sh
    else
      source $(brew --prefix nvm)/nvm.sh
    fi
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

if [ -d "$HOME/node_modules/.bin" ] ; then
    export PATH=$PATH:$HOME/node_modules/.bin
fi

if [ -d "$HOME/Library/Android/sdk/tools" ] ; then
    export ANDROID_HOME="$HOME/Library/Android/sdk"
    export PATH=$PATH:$HOME/Libarary/Android/sdk/platform-tools:$HOME/Library/Android/sdk/tools
fi

if [ -d "$HOME/.rvm" ] ; then
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
fi

if [ -d "$HOME/.pyenv" ] ; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"

  if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
  fi
fi

if [ -x "$(command -v asdf)" ]; then
  source $(brew --prefix asdf)/asdf.sh >&2
fi

source ~/.dotfiles/git-completion.bash

#if brew ls --versions myformula > /dev/null; then
#if which brew >/dev/null; then
#  if [ -f $(brew --prefix)/etc/bash_completion ]; then
#      . $(brew --prefix)/etc/bash_completion
#  fi
#fi

# override system commands
# alias ls="ls --color"

# TMUX
alias  tmux="tmux -2"

# Local environments

export VAGRANT_DEFAULT_PROVIDER=virtualbox
export GPG_TTY=$(tty)
export THREATSIM_HOME=~/Sites/wombat/threatsim
