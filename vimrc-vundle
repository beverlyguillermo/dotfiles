" Autoreload .vimrc
autocmd! bufwritepost .vimrc source %

" Settings required to set up Vundle, these two lines at the top
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
" Your Bundles
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
"Bundle 'ryan-cf/netrw'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-repeat'
Bundle 'ervandew/supertab'
Bundle 'majutsushi/tagbar'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-commentary'
Bundle 'jeetsukumaran/vim-buffergator'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
"javascript syntax
Bundle 'jelera/vim-javascript-syntax'
" coffescript syntax
Bundle 'kchmck/vim-coffee-script'
" html5 syntax
Bundle 'othree/html5.vim'
" less syntax
Bundle 'groenewege/vim-less'
" markdown syntax
Bundle 'tpope/vim-markdown'
" Ruby associated bundles
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'


syntax on
" Always put status line at the 2nd to last line
set laststatus=2
" Modifying status line look
set statusline=%-(%F%m%r%h%w%)%{fugitive#statusline()}\ %{&ff}/%Y/%{&encoding}\ %=%(@\%03.3b\ %Ll\ %l,%v\ (%p%%)%)
" show how many lines are highlighted in visual mode
set showcmd
" show the line and column number of the cursor position
set ruler
" Err, backup files locations
silent !mkdir -p /tmp/beverlyguillermo > /dev/null 2>&1
silent !chmod 700 /tmp/beverlyguillermo > /dev/null 2>&1
set backup
set backupdir=/tmp/beverlyguillermo
set directory=/tmp/beverlyguillermo
" show the line numbers
set number
" tabs
set tabstop=2
" backspace for converted tab
set softtabstop=2
" amount of block indenting
set shiftwidth=2
" convert tabs into spaces
set expandtab
" uses the shiftwidth instead of tabstop
set smarttab
" auto indenting when starting a new line
set smartindent
" copy indent from current line to new line
set autoindent
" line height
set linespace=2
" When the page starts to scroll, keep the cursor # lines from the top and #
" lines from the bottom
set scrolloff=4
" wrap scans
"set wrapscan
" ignore case in search
"set ignorecase
" only applies to search patterns that you type; it does not apply to * or # or gd
"set smartcase
" allow the cursor to be where there isn't an actual character
set virtualedit=all
" folder methods
set nofoldenable        "dont fold by default
set foldclose=all
set foldmethod=indent   "fold based on indent (or marker)
set foldnestmax=10      "deepest fold is 10 levels
set foldlevel=3         "this is just what i use
" gives the number of lines checked for set commands
set nomodeline
" don't wrap lines in the buffer window
set nowrap
" keep buffers the same size when buffers are closed
set noea
"set equalalways " i.e. make buffers equal all the time
set ff=unix
"set timeoutlen=500
"set textwidth=79
"set formatoptions=qrn1

" Autocompletion for commands
set wildmenu
set wildmode=list:longest,full
set lazyredraw
set backspace=2
" Show trailing white space
set list

" set listchars=tab:\xbb\xb7,trail:\xb7
" set listchars=tab:>-,trail:-
set cursorline cursorcolumn
set list listchars=tab:»·,trail:·

"set the gui options the way I like
"set guioptions=ac

colorscheme Tomorrow-Night

if has('gui_running')

  set guioptions-=T " hide toolbar in gui mode
  set guioptions-=r
  set guioptions-=L

  " Set up the gui cursor to look nice
  set guicursor=n-v-c:block-Cursor-blinkon0
  set guicursor+=ve:ver35-Cursor
  set guicursor+=o:hor50-Cursor
  set guicursor+=i-ci:ver25-Cursor
  set guicursor+=r-cr:hor20-Cursor
  set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

  if has("gui_macvim")
    set guifont=menlo:h12
  endif

endif

" Set tag files
set tags=./.tags,.tags,./.gemtags,.gemtags;

" These things start comment lines
set comments=sl:/*,mb:\ *,ex:\ */,O://,b:#,:%,:XCOMM,n:>,fb:-

filetype plugin indent on     " required!
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

" Cleaner IDE functionality
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone " improve completion
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <expr> <C-n> pumvisible() ? '<C-n>' : \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" inoremap <expr> <M-,> pumvisible() ? '<C-n>' : \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Remove trailing white space
autocmd BufRead * silent! %s/[\r \t]\+$//
autocmd BufEnter *.php :%s/[ \t\r]\+$//e
augroup filetypedetect
  au BufNewFile,BufRead *.php set filetype=php.html
  au BufNewFile,BufRead *.html.erb set filetype=html.eruby.ruby
  au BufNewFile,BufRead *.js set filetype=javascript
  au BufNewFile,BufRead *.coffeescript set filetype=javascript.coffeescript
augroup end

" Remove highlight and do escape
nnoremap <esc> :noh<cr><esc>

" Pressing Shift-< or Shift-> will let you indent/unident selected lines,
" allow it to occur multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" Map CTRL-E to do what ',' used to do
nnoremap <c-e> ,
vnoremap <c-e> ,

" Maps to make handling windows a bit easier
noremap <silent> ,h :wincmd h<CR>
noremap <silent> ,j :wincmd j<CR>
noremap <silent> ,k :wincmd k<CR>
noremap <silent> ,l :wincmd l<CR>
noremap <silent> <C-F9>  :vertical resize -10<CR>
noremap <silent> <C-F10> :resize +10<CR>
noremap <silent> <C-F11> :resize -10<CR>
noremap <silent> <C-F12> :vertical resize +10<CR>
noremap <silent> ,s8 :vertical resize 83<CR>
noremap <silent> ,cj :wincmd j<CR>:close<CR>
noremap <silent> ,ck :wincmd k<CR>:close<CR>
noremap <silent> ,ch :wincmd h<CR>:close<CR>
noremap <silent> ,cl :wincmd l<CR>:close<CR>
noremap <silent> ,cw :cclose<CR>
noremap <silent> ,bd :bd<CR>
noremap <silent> ,zp :tabp<CR>
noremap <silent> ,zn :tabn<CR>
noremap <silent> <C-7> <C-W>>
noremap <silent> <C-8> <C-W>+
noremap <silent> <C-9> <C-W>+
noremap <silent> <C-0> <C-W>>

" Highlight all instances of the current word under the cursor
nmap <silent> ^ :setl hls<CR>:let @/="<C-r><C-w>"<CR>

" Search the current file for what's currently in the search
" register and display matches
nmap <silent> ,gs
     \ :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Search the current file for the word under the cursor and display matches
nmap <silent> ,gw
     \ :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Swap two words
nmap <silent> ,gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='
nmap <silent> ,ul :t.\|s/./=/g\|set nohls<cr>

" put the vim directives for my file editing settings in
nmap <silent> ,vi
     \ ovim:set ts=2 sts=2 sw=2:<CR>vim600:fdm=marker fdl=1 fdc=0:<ESC>

nmap <silent> ,p  :NERDTreeToggle<cr>
let g:NERDTreeMapOpenSplit = 'i'
let g:NERDTreeShowHidden = 1
let g:NERDTreeIgnore     = ['.DS_Store', '.git', '*.bak']

nmap <silent> ,tb :TagbarToggle<cr>
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

nmap <silent> ,b  :BuffergatorToggle<cr>
let g:buffergator_viewport_split_policy = 'B'

nmap <silent> ,g  :IndentGuidesToggle<cr>
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'vim']
let g:indent_guides_auto_colors = 0
" For vim-indent-guides plugin
" Dark Background
"set background=light
hi IndentGuidesOdd  ctermbg=237
hi IndentGuidesEven ctermbg=130
" Light Background
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey

