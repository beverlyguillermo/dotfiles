" Autoreload .vimrc
autocmd! bufwritepost .vimrc source %

" Settings required to set up Vundle, these two lines at the top
set nocompatible               " be iMproved
filetype off                   " required!

" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/vundle

set rtp+=~/.vim/bundle/vundle/

call vundle#begin()
" let Vundle manage Vundle
" required!
Plugin 'VundleVim/Vundle.vim'
" Your Bundles
Plugin 'scrooloose/syntastic' " Language syntax checking
Plugin 'scrooloose/nerdtree'  " File
Plugin 'ervandew/supertab'    " Code completion
Plugin 'majutsushi/tagbar'    " view tags of current file in view
Plugin 'tpope/vim-repeat'     " Keep repeat command with .
Plugin 'tpope/vim-fugitive'   " Git commands
Plugin 'geoffharcourt/vim-matchit' " Match start/end of blocks
Plugin 'jeetsukumaran/vim-buffergator' "Buffer navigator
Plugin 'moll/vim-bbye' " Use Bdelete :Bwipeout
Plugin 'nathanaelkane/vim-indent-guides' " Indentation guidline
Plugin 'bling/vim-airline' " More info in vim statusline
Plugin 'sjl/gundo.vim' " Visualize possible undos
Plugin 'christoomey/vim-tmux-navigator' "Tmux and vim
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'mileszs/ack.vim'

"javascript syntax
Plugin 'jelera/vim-javascript-syntax'
" coffescript syntax
Plugin 'kchmck/vim-coffee-script'
Plugin 'mtscout6/vim-cjsx' " coffeescript react jsx
" html5 syntax
Plugin 'othree/html5.vim'
Plugin 'mustache/vim-mustache-handlebars'
" less syntax
Plugin 'groenewege/vim-less'
" Pandoc
Plugin 'vim-pandoc/vim-pandoc'
" Vimroom / Writing
Plugin 'mikewest/vimroom'
" Elixir
Plugin 'elixir-editors/vim-elixir'
" Go
Plugin 'fatih/vim-go'
" Ruby associated bundles
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-endwise'

Plugin 'gregsexton/MatchTag' " Match tags for html
" Plugin 'SirVer/ultisnips' " Snippets
" Plugin 'honza/vim-snippets' " helper to Snippets
Plugin 'elzr/vim-json' " better json highlighting
Plugin 'mhinz/vim-signify' " shows diff changes as you edit
Plugin 'plasticboy/vim-markdown'
Plugin 'tpope/vim-sleuth' " automatic shiftwidths, expandtab
Plugin 'tpope/vim-surround' " automatic surrounding of cursor for chars
Plugin 'tyru/open-browser.vim' " open uri in favorite browser
Plugin 'vim-scripts/a.vim' " Switch  between source files and header files
Plugin 'flazz/vim-colorschemes'
Plugin 'arzg/vim-colors-xcode'

call vundle#end()

set mouse=a
if &term =~ '^screen'
  " tmux knows the extended mouse mode
  set ttymouse=xterm2
endif
" https://stackoverflow.com/questions/7000960/in-vim-why-doesnt-my-mouse-work-past-the-220th-column
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end

" Install https://github.com/junegunn/fzf and https://github.com/ggreer/the_silver_searcher
set rtp+=~/.fzf

syntax on
" Always put status line at the 2nd to last line
set laststatus=2
" Modifying status line look
"set statusline=%-(%F%m%r%h%w%)%{fugitive#statusline()}\ %{&ff}/%Y/%{&encoding}\ %=%(@\%03.3b\ %Ll\ %l,%v\ (%p%%)%)
" show how many lines are highlighted in visual mode
set showcmd
" show the line and column number of the cursor position
set ruler
" Err, backup files locations
silent !mkdir -p /tmp/beverlyguillermo > /dev/null 2>&1
silent !chmod 700 /tmp/beverlyguillermo > /dev/null 2>&1
set backup
set backupdir=/tmp/beverlyguillermo
set directory=/tmp/beverlyguillermo
" show the line numbers
set number

" clipboard
set clipboard=unnamed

" tabs
set tabstop=2
" backspace for converted tab
set softtabstop=2
" amount of block indenting
set shiftwidth=2
" convert tabs into spaces
set expandtab
" uses the shiftwidth instead of tabstop
set smarttab
" auto indenting when starting a new line
set smartindent
" copy indent from current line to new line
set autoindent
" line height
set linespace=2
" When the page starts to scroll, keep the cursor # lines from the top and #
" lines from the bottom
set scrolloff=4
" wrap scans
"set wrapscan
" ignore case in search
"set ignorecase
" only applies to search patterns that you type; it does not apply to * or # or gd
"set smartcase
" allow the cursor to be where there isn't an actual character
set virtualedit=all
" folder methods
set nofoldenable        "dont fold by default
set foldclose=all
set foldmethod=indent   "fold based on indent (or marker)
set foldnestmax=10      "deepest fold is 10 levels
set foldlevel=3         "this is just what i use
" gives the number of lines checked for set commands
set modelines=5
" don't wrap lines in the buffer window
set nowrap
" keep buffers the same size when buffers are closed
set noea
"set equalalways " i.e. make buffers equal all the time
set ff=unix
"set timeoutlen=500
"set textwidth=79
"set formatoptions=qrn1

" Autocompletion for commands
set wildmenu
set wildmode=list:longest,full
set lazyredraw
set backspace=2
" Show trailing white space
set list

" set listchars=tab:\xbb\xb7,trail:\xb7
" set listchars=tab:>-,trail:-
"set cursorline cursorcolumn
set cursorline
set list listchars=tab:»·,trail:·

" http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
"hi CursorLine term=bold cterm=bold ctermbg=235 guibg=DarkGrey
hi CursorLine cterm=bold ctermbg=235 guibg=DarkGrey
hi CursorColumn ctermbg=235
hi ColorColumn ctermbg=DarkGray guibg=#2c2727
let &colorcolumn="120,".join(range(120,999),",")
"set the gui options the way I like

let base16colorspace=256  " Access colors present in 256 colorspace

let &t_SI="\033[4 q" " start insert mode
let &t_EI="\033[1 q" " end insert mode

if has('gui_running')

  " Dark Background
  " set background=dark

  set guioptions=ac

  set guioptions-=T " hide toolbar in gui mode
  set guioptions-=r
  set guioptions-=L

  " Set up the gui cursor to look nice
  set guicursor=n-v-c:block-Cursor-blinkon0
  set guicursor+=ve:ver35-Cursor
  set guicursor+=o:hor50-Cursor
  set guicursor+=i-ci:ver25-Cursor
  set guicursor+=r-cr:hor20-Cursor
  set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

  if has("gui_macvim")
    set guifont=menlo:h14
  endif

  if has("gui_x11")
    set guifont=inconsolata:12`
  endif

  colorscheme onedark
  hi ColorColumn ctermbg=Black guibg=#2c2727
endif

" Set tag files
set tags=./.tags,.tags,./.gemtags,.gemtags,./gems.tags,gem.tags,./tags,tags;

" These things start comment lines
set comments=sl:/*,mb:\ *,ex:\ */,O://,b:#,:%,:XCOMM,n:>,fb:-

filetype plugin indent on     " required!
autocmd FileType * setlocal tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType html setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

" Cleaner IDE functionality
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone " improve completion
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <expr> <C-n> pumvisible() ? '<C-n>' : \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" inoremap <expr> <M-,> pumvisible() ? '<C-n>' : \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Remove trailing white space
autocmd BufRead * silent! %s/[\r \t]\+$//
autocmd BufNewFile,BufEnter *.rb :%s/[ \t\r]\+$//e set ai sw=2 ts=4 sta et ff=unix
autocmd BufNewFile,BufEnter *.py set ai sw=4 ts=4 sta et fo=croql ff=unix
augroup filetypedetect
  au BufNewFile,BufRead *.html set filetype=html
  au BufNewFile,BufRead *.php  set filetype=php.html
  au BufNewFile,BufRead *.erb  set filetype=eruby.ruby.html
  au BufNewFile,BufRead *.js   set filetype=javascript
  au BufNewFile,BufRead *.coffeescript set filetype=javascript.coffeescript
augroup end

" Remove highlight and do escape
"nnoremap <esc> :noh<cr>

" Save file attempt
cmap w!! %!sudo tee > /dev/null %

" Pressing Shift-< or Shift-> will let you indent/unident selected lines,
" allow it to occur multiple times in visual mode
vnoremap < <gv
vnoremap > >gv

" Map CTRL-E to do what ',' used to do
nnoremap <c-e> ,
vnoremap <c-e> ,

" Maps to make handling windows a bit easier
" set winheight=30
" set winminheight=5
" set winminwidth=10
noremap <silent> ,h :wincmd h<CR>
noremap <silent> ,j :wincmd j<CR>
noremap <silent> ,k :wincmd k<CR>
noremap <silent> ,l :wincmd l<CR>
noremap <silent> ,-- :vertical resize -10<CR>
noremap <silent> ,== :vertical resize +10<CR>
noremap <silent> ,=  :resize +10<CR>
noremap <silent> ,-  :resize -10<CR>
noremap <silent> ,s8 :vertical resize 83<CR>
noremap <silent> ,cj :wincmd j<CR>:close<CR>
noremap <silent> ,ck :wincmd k<CR>:close<CR>
noremap <silent> ,ch :wincmd h<CR>:close<CR>
noremap <silent> ,cl :wincmd l<CR>:close<CR>
noremap <silent> ,cw :cclose<CR>
noremap <silent> ,bd :bd<CR>
noremap <silent> ,bda :bufdo bd<CR>
nnoremap <C-Up> gT
nnoremap <C-Down> gt

" Highlight all instances of the current word under the cursor
nmap <silent> ^ :setl hls<CR>:let @/="<C-r><C-w>"<CR>

" Search the current file for what's currently in the search
" register and display matches
" nmap <silent> ,gs
"      \ :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Search the current file for the word under the cursor and display matches
" nmap <silent> ,gw
"      \ :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Swap two words
"nmap <silent> ,gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='

nmap <silent> ,ul :t.\|s/./=/g\|set nohls<cr>

" put the vim directives for my file editing settings in
nmap <silent> ,vi
     \ ovim:set ts=2 sts=2 sw=2:<CR>vim600:fdm=marker fdl=1 fdc=0:<ESC>

nmap <silent> ,u :GundoToggle<cr>

nmap <silent> ,p  :NERDTreeToggle<cr>
let g:NERDTreeMapOpenSplit = 'i'
let g:NERDTreeShowHidden = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeIgnore     = ['.DS_Store', '.git$', '*.bak', '.pytest_cache', '.pycache', '.idea', '.mypy_cache', '.venv', '.vscode']
let g:NERDTreeNodeDelimiter = "\u00a0"
" let g:NERDTreeNodeDelimiter = "\x07"
autocmd BufWinEnter * NERDTreeMirror

nmap <silent> ,tb :TagbarToggle<cr>
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'

nmap <silent> ,b  :BuffergatorToggle<cr>
let g:buffergator_viewport_split_policy = 'B'

nmap <silent> ,g  :IndentGuidesToggle<cr>
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'vim']
" For vim-indent-guides plugin
hi IndentGuidesOdd  ctermbg=237
hi IndentGuidesEven ctermbg=130
" Light Background
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey

"let g:vimroom_background = black
"let g:vimroom_min_sidebar_width = 20
"let g:vimroom_navigation_keys = 0
"let g:vimroom_scrolloff = 999
let g:vimroom_sidebar_height = 0
let g:vimroom_width = 80

"mustache
let g:mustache_abbreviations = 1

"fzf config
" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" let g:fzf_layout = { 'down': '~40%' }

" You can set up fzf window using a Vim command (Neovim or latest Vim 8 required)
"let g:fzf_layout = { 'window': 'enew' }
"let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" invoke fzf
noremap <c-p> :FZF<cr>
augroup fzf
  autocmd!
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END

" Needed for tmux and vim to play nice
map <Esc>[A <Up>
map <Esc>[B <Down>
map <Esc>[C <Right>
map <Esc>[D <Left>

" Console movement
cmap <Esc>[A <Up>
cmap <Esc>[B <Down>
cmap <Esc>[C <Right>
cmap <Esc>[D <Left>
